#!/bin/sh

# Usage: To use in the self-contained image, either use
  # `docker-compose -f docker-compose.sc.yaml run rubyrails script/setup-sc`
  # OR attach to the container with
  # `docker attach classroom_rubyrails` and then do script/setup-sc manually
  # OR
  # `docker exec -it classroom_rubyrails bash`
  # OR (if for some reason the container has exited)
  # `docker-compose -f docker-compose.sc.yaml run rubyrails bash` 
  # and then run it manually.

# This sets up the database for the first time and makes the .env file
set -e

cd "$(dirname "$0")/.."

echo "===> Checking to make sure everything is available"
script/poll-for-services

echo "===> Preparing database..."
bin/rails db:setup

echo "===> Remove old logs and tempfiles..."
bin/rails log:clear tmp:clear

echo "===> Restart application server..."
bin/rails restart

if [ -z "$RAILS_ENV" ] && [ -z "$RACK_ENV" ]; then
  # Only things for a development environment will run inside here
  # Do things that need to be done to the application to set up for the first
  # time. Or things needed to be run to to reset the application back to first
  # use experience. These things are scoped to the application's domain.

  if ! [ -r ".env" ]; then
    cp .env-example .env
  fi
fi

#Since this should only be run in a selfcontained container, set
# the SELFCONTAINED env variable in the .env file
sed -n -e '/^SELFCONTAINED=/!p' -e '$aSELFCONTAINED=TRUE' .env

echo "==> Your app is almost ready! Please make sure you fill out your .env file."
